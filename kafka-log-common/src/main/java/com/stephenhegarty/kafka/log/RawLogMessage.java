/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.stephenhegarty.kafka.log;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class RawLogMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5845232080148475544L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RawLogMessage\",\"namespace\":\"com.stephenhegarty.kafka.log\",\"fields\":[{\"name\":\"logId\",\"type\":[\"string\",\"null\"]},{\"name\":\"infoLevel\",\"type\":[\"string\",\"null\"]},{\"name\":\"logString\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RawLogMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RawLogMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RawLogMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RawLogMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RawLogMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RawLogMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RawLogMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RawLogMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RawLogMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence logId;
  private java.lang.CharSequence infoLevel;
  private java.lang.CharSequence logString;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RawLogMessage() {}

  /**
   * All-args constructor.
   * @param logId The new value for logId
   * @param infoLevel The new value for infoLevel
   * @param logString The new value for logString
   */
  public RawLogMessage(java.lang.CharSequence logId, java.lang.CharSequence infoLevel, java.lang.CharSequence logString) {
    this.logId = logId;
    this.infoLevel = infoLevel;
    this.logString = logString;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return logId;
    case 1: return infoLevel;
    case 2: return logString;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: logId = (java.lang.CharSequence)value$; break;
    case 1: infoLevel = (java.lang.CharSequence)value$; break;
    case 2: logString = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'logId' field.
   * @return The value of the 'logId' field.
   */
  public java.lang.CharSequence getLogId() {
    return logId;
  }


  /**
   * Sets the value of the 'logId' field.
   * @param value the value to set.
   */
  public void setLogId(java.lang.CharSequence value) {
    this.logId = value;
  }

  /**
   * Gets the value of the 'infoLevel' field.
   * @return The value of the 'infoLevel' field.
   */
  public java.lang.CharSequence getInfoLevel() {
    return infoLevel;
  }


  /**
   * Sets the value of the 'infoLevel' field.
   * @param value the value to set.
   */
  public void setInfoLevel(java.lang.CharSequence value) {
    this.infoLevel = value;
  }

  /**
   * Gets the value of the 'logString' field.
   * @return The value of the 'logString' field.
   */
  public java.lang.CharSequence getLogString() {
    return logString;
  }


  /**
   * Sets the value of the 'logString' field.
   * @param value the value to set.
   */
  public void setLogString(java.lang.CharSequence value) {
    this.logString = value;
  }

  /**
   * Creates a new RawLogMessage RecordBuilder.
   * @return A new RawLogMessage RecordBuilder
   */
  public static com.stephenhegarty.kafka.log.RawLogMessage.Builder newBuilder() {
    return new com.stephenhegarty.kafka.log.RawLogMessage.Builder();
  }

  /**
   * Creates a new RawLogMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RawLogMessage RecordBuilder
   */
  public static com.stephenhegarty.kafka.log.RawLogMessage.Builder newBuilder(com.stephenhegarty.kafka.log.RawLogMessage.Builder other) {
    if (other == null) {
      return new com.stephenhegarty.kafka.log.RawLogMessage.Builder();
    } else {
      return new com.stephenhegarty.kafka.log.RawLogMessage.Builder(other);
    }
  }

  /**
   * Creates a new RawLogMessage RecordBuilder by copying an existing RawLogMessage instance.
   * @param other The existing instance to copy.
   * @return A new RawLogMessage RecordBuilder
   */
  public static com.stephenhegarty.kafka.log.RawLogMessage.Builder newBuilder(com.stephenhegarty.kafka.log.RawLogMessage other) {
    if (other == null) {
      return new com.stephenhegarty.kafka.log.RawLogMessage.Builder();
    } else {
      return new com.stephenhegarty.kafka.log.RawLogMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for RawLogMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RawLogMessage>
    implements org.apache.avro.data.RecordBuilder<RawLogMessage> {

    private java.lang.CharSequence logId;
    private java.lang.CharSequence infoLevel;
    private java.lang.CharSequence logString;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.stephenhegarty.kafka.log.RawLogMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.logId)) {
        this.logId = data().deepCopy(fields()[0].schema(), other.logId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.infoLevel)) {
        this.infoLevel = data().deepCopy(fields()[1].schema(), other.infoLevel);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.logString)) {
        this.logString = data().deepCopy(fields()[2].schema(), other.logString);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing RawLogMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.stephenhegarty.kafka.log.RawLogMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.logId)) {
        this.logId = data().deepCopy(fields()[0].schema(), other.logId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.infoLevel)) {
        this.infoLevel = data().deepCopy(fields()[1].schema(), other.infoLevel);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.logString)) {
        this.logString = data().deepCopy(fields()[2].schema(), other.logString);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'logId' field.
      * @return The value.
      */
    public java.lang.CharSequence getLogId() {
      return logId;
    }


    /**
      * Sets the value of the 'logId' field.
      * @param value The value of 'logId'.
      * @return This builder.
      */
    public com.stephenhegarty.kafka.log.RawLogMessage.Builder setLogId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.logId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'logId' field has been set.
      * @return True if the 'logId' field has been set, false otherwise.
      */
    public boolean hasLogId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'logId' field.
      * @return This builder.
      */
    public com.stephenhegarty.kafka.log.RawLogMessage.Builder clearLogId() {
      logId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'infoLevel' field.
      * @return The value.
      */
    public java.lang.CharSequence getInfoLevel() {
      return infoLevel;
    }


    /**
      * Sets the value of the 'infoLevel' field.
      * @param value The value of 'infoLevel'.
      * @return This builder.
      */
    public com.stephenhegarty.kafka.log.RawLogMessage.Builder setInfoLevel(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.infoLevel = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'infoLevel' field has been set.
      * @return True if the 'infoLevel' field has been set, false otherwise.
      */
    public boolean hasInfoLevel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'infoLevel' field.
      * @return This builder.
      */
    public com.stephenhegarty.kafka.log.RawLogMessage.Builder clearInfoLevel() {
      infoLevel = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'logString' field.
      * @return The value.
      */
    public java.lang.CharSequence getLogString() {
      return logString;
    }


    /**
      * Sets the value of the 'logString' field.
      * @param value The value of 'logString'.
      * @return This builder.
      */
    public com.stephenhegarty.kafka.log.RawLogMessage.Builder setLogString(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.logString = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'logString' field has been set.
      * @return True if the 'logString' field has been set, false otherwise.
      */
    public boolean hasLogString() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'logString' field.
      * @return This builder.
      */
    public com.stephenhegarty.kafka.log.RawLogMessage.Builder clearLogString() {
      logString = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RawLogMessage build() {
      try {
        RawLogMessage record = new RawLogMessage();
        record.logId = fieldSetFlags()[0] ? this.logId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.infoLevel = fieldSetFlags()[1] ? this.infoLevel : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.logString = fieldSetFlags()[2] ? this.logString : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RawLogMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<RawLogMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RawLogMessage>
    READER$ = (org.apache.avro.io.DatumReader<RawLogMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.logId == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.logId);
    }

    if (this.infoLevel == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.infoLevel);
    }

    if (this.logString == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.logString);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 0) {
        in.readNull();
        this.logId = null;
      } else {
        this.logId = in.readString(this.logId instanceof Utf8 ? (Utf8)this.logId : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.infoLevel = null;
      } else {
        this.infoLevel = in.readString(this.infoLevel instanceof Utf8 ? (Utf8)this.infoLevel : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.logString = null;
      } else {
        this.logString = in.readString(this.logString instanceof Utf8 ? (Utf8)this.logString : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 0) {
            in.readNull();
            this.logId = null;
          } else {
            this.logId = in.readString(this.logId instanceof Utf8 ? (Utf8)this.logId : null);
          }
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.infoLevel = null;
          } else {
            this.infoLevel = in.readString(this.infoLevel instanceof Utf8 ? (Utf8)this.infoLevel : null);
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.logString = null;
          } else {
            this.logString = in.readString(this.logString instanceof Utf8 ? (Utf8)this.logString : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










